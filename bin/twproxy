#!/usr/bin/env ruby
require "twproxy"
require "sinatra"
require "optparse"
require "digest/sha1"

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: twproxy [options]"

  opts.on("-p", "--port PORT", "Specify port to run the proxy on. Defaults to 8888.") do |port|
    options[:port] = port
  end
  opts.on("-b", "--bind HOSTNAME", "Specify hostname to bind to. Defaults to 127.0.0.1.") do |hostname|
    options[:bind] = hostname
  end
  opts.on("-s", "--enable-ssl", "Ensures cookies are marked as secure.") do |ssl|
    options[:enable_ssl] = ssl
  end
  opts.on("-d", "--destination URL", "Specify the url of the TiddlyWiki server. Defaults to http://localhost:8080.") do |url|
    options[:url] = url
  end
  opts.on("-x", "--path-prefix PATH_PREFIX", "Specify the path prefix of the TiddlyWiki server, if existing. Defaults to /.") do |path_prefix|
    options[:path_prefix] = path_prefix
  end
  opts.on("-g", "--generate-password CLEARTEXT", "Generates a SHA1 hashed password") do |pass|
    puts Digest::SHA1.hexdigest(pass)
    exit
  end
  opts.on("-u", "--username USER", "Sets the username. Defaults to user.") do |user|
    options[:username] = user
  end
  opts.on("-P", "--password HASHED", "Sets the user's password. Use a SHA1 hash or -g. Defaults to test.") do |hash|
    options[:password] = hash
  end
  opts.on("-a", "--auth KEY", "Sets a TOTP key for use with Google Authenticator.") do |key|
    options[:auth] = key
  end
  opts.on("-h", "--help", "Displays this help") do
    puts opts
    exit
  end
end.parse!

TWProxy.set :bind, options[:bind] || "127.0.0.1"

TWProxy.set :port, options[:port] || 8888
TWProxy.set :enable_ssl, options[:enable_ssl] || false
TWProxy.set :url, options[:url] || "http://localhost:8080" || ENV['WIKI_URL']
TWProxy.set :path_prefix, options[:path_prefix] || "/"
TWProxy.set :username, options[:username] || ENV['WIKI_USER'] || "user"
# Default password is test
TWProxy.set :password,
            options[:password] || ENV['WIKI_PASS'] || "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
TWProxy.set :auth, options[:auth] || ENV['WIKI_AUTH']

TWProxy.run!